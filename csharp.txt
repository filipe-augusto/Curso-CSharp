22:52 20/12/2020
numeros integrais

       		 //integral assinado
            sbyte num1 = 10;  //de -128 a 127
            short num2 = 20; // de -32.768 a 32.767
            int num3 = 30; //de -2,147 x 10^10
            long num4 = 40L; //de -9,223x 10^18 a  9,223x 10^18

            //integral sem sinal
            byte num5 = 10; //0 a 255
            ushort num6 = 20; //de  0 a 65.535
            uint num7 = 30; //de 0 a 4.29 x 10^9
            ulong num8 = 40L; // de 0 a 1,8. z 10^18

            sbyte numero_primo;


            Console.WriteLine(num1+num2);
            Console.ReadKey();
filipe
----------------------------------
Encapsular
  //encapsular = separar o programa em partes mais isoladas possiveis. É o processo de ocultar ou esconder uma classe do 
  //acesso exterior
//torna uma variavel privada e o acesso a ela será atraves de metodos
   class Conta
    {
        private string _cliente;
        private double _saldo;
        private double _taxa = 10;
       
        public string Cliente
        {
            get { return _cliente; }
            set
            {
                if (value != "Filipe" && value != "Chaves")
                {
                    _cliente = "Visitante";
                    Saldo = 0;
                }
                else
                {
                    _cliente = value;
                    Saldo = 1000;
                }       }  }
        public double Saldo
        {
            get { return _saldo; }
            private set
            {
                _saldo = value;
            } }}
 		----
class Program
{
static void Main(string[] args)
	{
	    Conta c1 = new Conta();
            c1.Cliente = "Filipe";	
	    double valor = 100;
            c1.Depositar(valor);
	    Console.WriteLine("Cliente: "+ c1.Cliente);
            Console.WriteLine("Saldo: "+ c1.Saldo);
            Console.ReadKey();
	}
}
-----------------------------------
Herança
//metodo abstrato nao tem implementação
//quando herda um metodo * abstrat * é necessario usar o * override * na classe que herdara  
//  classe marcada com * sealed *  nao pode ser herdada
    abstract class Veiculo 
    {
        public string Cor { get; set; }
        public string Marca { get; set; }
        public int VelocidadeMAxima { get; set; }
        public abstract void Acelerar(); //metodo abstrato nao tem implementação

        public abstract void Parar();    
    }
 		----
    class Carro : Veiculo
    {  
        public void LigarMotor()
        {
            Console.WriteLine("O carro ligou o motor");
        }
        public override void Acelerar()//herdou uma classe abstrato, é necessario implementa-la
        {
            Console.WriteLine("Acelerou o carro!");
        }

        public override void Parar()// 
        {
            Console.WriteLine("Parou o carro!");
        }}}
                ----
 sealed class Bicicleta : Veiculo //não pode ser herdada
    {    
        public void Pedalar()
        {
            Console.WriteLine("pedalando!");
        }

        public override void Acelerar()//herdou uma classe abstrato
        {
            Console.WriteLine("Acelerou a bicicleta!");
        }

        public override void Parar()
        {
            Console.WriteLine("Parou a bicicleta!");
        }
    }
}

  -------------------
 class Program
    { static void Main(string[] args) {
	    Carro c = new Carro();
            //c.Cor = "preto";
 Bicicleta b = new Bicicleta();
            //b.Cor = "veiculo";
            
}}
----------------------------------------
Metodo construtor

 class Pessoa{
        public string nome;
        public string sobrenome;
        public int anoNascimento;
        public int idade;

  public Pessoa(string nome, string sobrenome)
        {
            this.nome = nome;
            this.sobrenome = sobrenome;
            this.anoNascimento = 2002;
            idade = Idade();
        }
 private int Idade()
        {
            return 2020 - anoNascimento;
        }}
              -------
static void Main(string[] args)
        {
  Pessoa p1 = new Pessoa();  Console.WriteLine(p1.nome); Console.WriteLine(p1.sobrenome); Console.WriteLine(p1.anoNascimento);
}
---------------------------------------
Modificadores

 class Humano {
        protected string nome; //é particular da classe e de quem herdar
        public string sobrenome; //é completamente privado da classe
        internal int idade;//restrito somente a aplicação
    }
	------
    class Homem : Humano {
        public void Metodo()
        {
            nome = "";
            idade = 0;
        }
    }
     -----
static void Main(string[] args)
        {
	    Homem h = new Homem();
            h.idade = 27;}
-----------------------------------------------
Polimorfismo
//é o princípio pelo qual duas ou mais classes derivadas de uma mesma superclasse podem invocar métodos que têm a mesma identificação (assinatura) mas comportamentos distintos
// ou seja, herda da superclasse e modifica os metodos
 --------- superclasse
public class Forma
    {
        public int x { get; private set; }
        public int Y { get; private set; }
        public int Altura { get; private set; }
        public int Largura { get; private set; }
        public int Raio { get; private set; }
 public virtual void Desenhar() {
            Console.WriteLine("Preparando-se para desenhar");  }}
 public virtual void Area(){ }
    ------- classe circulo - - irá herdar e modificar os metodos
  public class Circulo : Forma
    {
        public override void Desenhar()
        {
            base.Desenhar();
            Console.WriteLine("Desenhando um circulo"); 
 }
        public override void Area() {
            double area = 3.14 * (Raio * Raio);
            Console.WriteLine("Area do Circulo " + area);   }}
      ------------- classe retangulo - irá herdar e vai modificar os metodos
  public class Retangulo : Forma
    {
        public override void Desenhar()
        {
            base.Desenhar();
            Console.WriteLine("Desenhando um retangulo");
        }
        public override void Area()
        {
            double area = Altura * Largura;
            Console.WriteLine("Area do retangulo  " + area);}}
	----------- classe principal
static void Main(string[] args)
        {
 Forma a = new Forma();  
 Forma c = new Circulo();
 Forma d = new Retangulo();
}
---------------------------------
//Interface
//não é considerada uma Classe e sim uma Entidade.
//Não possui implementação, apenas assinatura, ou seja, apenas a definição dos seus métodos sem o corpo
//  Todos os métodos são abstratos.
//Seus métodos são implicitamente Públicos e Abstratos.
// Não há como fazer uma instância de uma Interface e nem como criar um Construtor.
 interface IConta
    {
        String Usuario { get; set; }

        void Depositar();
        void Saldo();
        void Sacar();
    }

class CaixaEletronico : IConta
    {
        public string Usuario { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        public void Depositar()
        {
            throw new NotImplementedException();
        }

        public void Sacar()
        {
            throw new NotImplementedException();
        }

        public void Saldo()
        {
            throw new NotImplementedException();
        }

        public void SolicitarEmpresimo() { }
    }
------------------------------
Propriedades   #
class Teste
    {
        //definição de um campo
        private string _nome; 
        public string _sobrenome { get; } = "Chaves"; //definindo valor padrão
        private int _idade;
	
  public string Nome
        {
            get
            {
                return _nome;
            }
            set
            {
                _nome = value;
            }
        }

  public int Idade 
        {
            get
            {
                return _idade;
            }
           set
            {
                if(value < 18)
                {
                    Console.WriteLine("idade não pode ser menor que 18 anos");
                }
                else { 
                _idade = value; }}
}           
        static void Main(string[] args)
        {
            Teste t = new Teste();
            t.Nome = "Filipe";
            t.Idade = 27;
	Console.WriteLine(t.Nome + " "+ t._sobrenome);
}
-----------------------
Deletegate
//delegate armazena referencias de metodos

  class Matematica
    {
        public void Somar(int n1, int n2)
        {
            Console.WriteLine("A soma é: " + (n1 + n2));
        }
        public void Subtrair(int n1, int n2)
        {
            Console.WriteLine("A subtração é: " + (n1 - n2));
        }
        public void Divdir(int n1, int n2)
        {
            Console.WriteLine("A divisão é: " + (n1 / n2));
        }
        public void Multiplicar(int n1, int n2)
        {
            Console.WriteLine("A multiplicação é: " + (n1 / n2));
        }
    }
}
         ---------
class Program
    {
        delegate void Operacao(int n1,int n2); 

        static void Main(string[] args)
        {
            Matematica m = new Matematica();
            Operacao conta = null;

            conta += m.Somar;
            conta += m.Subtrair;
            conta += m.Divdir;
            conta += m.Multiplicar;
            conta(10, 2);

            Console.ReadKey();
        }
    }

-----------------------
------------------
13:53 31/12/2020
cadastro
   class Pessoa
    {
        public string Nome { get; set; }
        public string DataNascimento { get; set; }
        public string EstadoCivil { get; set; }
        public string Telefone { get; set; }
        public bool CasaPropria { get; set; }
        public bool Veiculo { get; set; }
        public char Sexo { get; set; }

    }
}
----------------

 public partial class Form1 : Form
    {
        List<Pessoa> pessoas;
        public Form1()
        {
            InitializeComponent();
            pessoas = new List<Pessoa>();

            comboEC.Items.Add("Casado");
            comboEC.Items.Add("Solteiro");
            comboEC.Items.Add("Viuvo");
            comboEC.Items.Add("Separado");
            comboEC.SelectedIndex = 0;
        }      
--------------------------
private void btnCadastrar_Click(object sender, EventArgs e)
        {
            int index = -1;
            foreach(Pessoa pessoa in pessoas)
            {
                if(pessoa.Nome == txtNome.Text)
                {
                    index = pessoas.IndexOf(pessoa);
                }
            }
            if(txtNome.Text == "")
            {
                MessageBox.Show("Preencha o campo nome");
                txtNome.Focus();
                return;
            }
            if (txtTelefone.Text == "(  )      -")
            {
                MessageBox.Show("Preencha o campo telefone");
                txtTelefone.Focus();
                return;
            }
            char sexo;
            if (radioM.Checked)
            {
                sexo = 'M';
            }else if (radioF.Checked)
            {
                sexo = 'F';
            }else
            {
                sexo = 'O';
            }
            Pessoa p = new Pessoa();
            p.Nome = txtNome.Text;
            p.DataNascimento = txtData.Text;
            p.EstadoCivil = comboEC.SelectedItem.ToString();
            p.Telefone = txtTelefone.Text;
            p.CasaPropria = checkCasa.Checked;
            p.Veiculo = checkVeiculo.Checked;
            p.Sexo = sexo;

            if(index < 0)
            {
                pessoas.Add(p);
            }
            else
            {
                pessoas[index] = p;
            }
            btnLimpar_Click(btnLimpar, EventArgs.Empty);
            Listar();
        }
   --------------

 private void btnExcluir_Click(object sender, EventArgs e)
        {
            int indice = lista.SelectedIndex;
            pessoas.RemoveAt(indice);
            Listar();

        }

----------
  private void btnLimpar_Click(object sender, EventArgs e)
        {
            txtNome.Text = "";
            txtData.Text = "";
            comboEC.SelectedIndex = 0;
            txtTelefone.Text = "";
            checkCasa.Checked = false;
            checkVeiculo.Checked = false;
            radioM.Checked = true;
            radioF.Checked = false;
            radioO.Checked = false;
            txtNome.Focus();
        }
------------
-----------------------

Contains 
string texto = "este tipo de variavel é alfanumerica";
        //    string palavra = "tipo";             
        //    if (texto.Contains(palavra))
        //    {
        //        label1.Text = "Contém";
        //    }
        //    else
        //    {
        //        label1.Text = (" não contém");
        //    }
----------------------
toString
int num = 5400;
            label1.Text = num.ToString();
---------------
15:45 09/01/2021
-----------------------------------------------
CLASSE PARA CADASTRAR O USUARIO
 static class CadastrarUsuario
    {

        /*
         * 
         * Um membro estático não pode ser referenciado através de uma instância mas somente através do nome do tipo.
         * RESUMO:
  - Não pode ser usada com indexadores;
  - Pode ser usada em construtores;
  - Por padrão é privada;
  - Pode ser publica ou parametrizada;
  - Se aplicada a uma classe todos os membros tem que ser estáticos também;
  - Não pode ser acessado por uma instância;*/
        private static Usuario[] usuarios =
            {
                new Usuario(){ Nome = "Filipe",Senha="abc123"},//0
                new Usuario(){ Nome = "fabio",Senha="abc12345"},//1
                new Usuario(){ Nome = "Arthur",Senha="bb"}//2
        };
        private static Usuario _userLogado = null;
      
        public static Usuario UsuarioLogado {
            get { return _userLogado; }
            private set { _userLogado = value; }
        }

        public static bool Login(string nome, string senha)  {
            foreach(Usuario usuario in usuarios) {
                if (usuario.Nome == nome && usuario.Senha == senha) {
                    UsuarioLogado = usuario;
                    return true;
                }
            }
                return false;
        }
    }

------------------
CLASSE USUARIO
  class Usuario
    {
       public  string Senha { get; set; }
        public string Nome { get; set; }
    }

-------------------------
FORM TELA DE LOGIN
public partial class FormLogin : Form
    {
        public static bool Cancelar = false;
        public FormLogin()
        {
            InitializeComponent();
        }
        private void btnSenha_Click(object sender, EventArgs e)
        {
            string nome = txtUsuario.Text;
            string senha = txtSenha.Text;
            if (CadastrarUsuario.Login(nome, senha)) {
                Close();
            }
            else {
                MessageBox.Show("Acesso Negado!");
                txtUsuario.Text = "";
                txtSenha.Text = "";
                _ = txtUsuario.Focus();
                Close();

            }
        }

        private void btnCancelar_Click(object sender, EventArgs e)
        {
            Cancelar = true;
            Close();
        }
    }

-------------------------

FORM PRINICIPAL
 private void Form1_Load(object sender, EventArgs e)
        {
            FormLogin f = new FormLogin();
            //

            while(CadastrarUsuario.UsuarioLogado == null) {
                Visible = false;
                f.ShowDialog();

                if (FormLogin.Cancelar) {
                    Application.Exit();
                    return;
                }
            }
                label_BoasVindas.Text = "Bem vindo(a) \n" + CadastrarUsuario.UsuarioLogado.Nome;
         
            Visible =true;
        }
    }
-----------------------------------------
22:24 10/01/2021

  #region TryParse
            // //tryParse - tenta convertar 
            // int num;
            //// bool res = int.TryParse("1985ano", out num);

            // if (int.TryParse("1985ano", out num))
            // {
            //     label.Text = num.ToString();
            // }
            // else
            // {
            //     label.Text = "Erro na conversão";
            // }
  #endregion
  #region ToString 
            // int num = 11;
            // label.Text = num.ToString("#.00");
            //  label.Text = num.ToString("(11)00000.0000");
            //label.Text = num.ToString("x");//hexadecimal
            //label.Text = num.ToString("D");//decimal
            // label.Text = num.ToString("C");//valor
            //label.Text = num.ToString("(00)0000-0000");//valor
            // label.Text = num.ToString("0000-000");//valor
            // label.Text = Convert.ToString(num, 16);
   #endregion
   #region  Math
            double pi = Math.PI;
            double E = Math.E;
            double seno = Math.Sin(3);
            double cosseno = Math.Cos(3);
            double potencia = Math.Pow(5,2);
            double raiz = Math.Sqrt(49);
            Math.Round(158.75);//retorna
            double floor = Math.Floor(52.75);//arredondar para baixo
            double ceil = Math.Ceiling(2.52); //arredondar para cima
            label.Text = pi.ToString("#.00");
 #endregion

--------------------------------------------------------
20:29 11/01/2021

   listaBox.Items.Clear();
            HashSet<string> veiculos = new HashSet<string>()//hashSet nao aceita adicionar um item que ja tem na lista
            { 
                "Carro","Moto","Avião","Helicoptero", "Barco"
            };
            MessageBox.Show(veiculos.ElementAt(2));
            MessageBox.Show(veiculos.First());
            MessageBox.Show(veiculos.Last());
            //if (veiculos.Add("Cavalo"))
            //{
            //    MessageBox.Show("Item adicionado");
            //}
            //else
            //{
            //    MessageBox.Show("Item não adicionado");
            //}

            foreach (string item in veiculos)
            {
                listaBox.Items.Add(item);
            }

----------------------------
listaBox.Items.Clear();
            string[] nomes = new string[3];
            nomes[0] = "Filipe";
            nomes[1] = "arthur";
            nomes[2] = "Danny";

            List<string> nomes2 = new List<string>();
            nomes2.Add("Lucas");
            nomes2.Add("Beatriz");
            nomes2.AddRange(nomes);
            //adiciona um array na lista
            //if (nomes2.Remove("Lucas"))//remove
            //{
            //    MessageBox.Show("Lucas removido");
            //}
            //else
            //{
            //    MessageBox.Show("não foi possivel remover");
            //}
            //if (nomes2.Contains("Filipe"))
            //{
            //    MessageBox.Show("contém!");
            //}
            //else
            //{
            //  MessageBox.Show("não contém!");
            //}
            //listaBox.Items.Add(nomes2[1]);
            //listaBox.Items.Add(nomes2[0]);
            //listaBox.Items.AddRange(nomes);
            // MessageBox.Show("Numero de elementos: " + nomes2.Count);//conta quantos elementos tem
            //nomes2.Sort();
            // MessageBox.Show($"Filipe esta no indice: {nomes2.IndexOf("Filipe")}");  
            // nomes2.Insert(2, "Joao");
            nomes2.RemoveAt(1);

            foreach (string nome in nomes2)
            {
                listaBox.Items.Add(nome);
            }
---------------------------------------------
21:27 04/02/2021

namespace Variaveis
{
    class Program
    {
        enum Notas
        {
            Minimo = 10, 
            Media = 15, 
            Maxima = 20
        }
        struct Pessoa
        {
            public string nome;
            public int idade;
            public double altura;
        }
        static void Main(string[] args)
        {
            #region Numericas Integrais
            //// Integral assinado
            //sbyte num1 = 10; // 8 bits, de -128 a 127
            //short num2 = 20; // 16 bits, –32.768 a 32.767
            //int num3 = 30; // 32 bits, –2.147.483.648 a 2.147.483.647
            //long num4 = 40L; // 64 bits, –9.223.372.036.854.775.808 a 9.223.372.036.854.775.807
            //// Integral sem sinal
            //byte num5 = 10; // 8 bits, intervalo de 0 a 255
            //ushort num6 = 20; // 16 bits, de 0 a 65.535
            //uint num7 = 30;  // 32 bits, de 0 a 4.294.967.295
            //ulong num8 = 40L; // 64 bits, de 0 a 18.446.744.073.709.551.615

            //sbyte numero;
            //numero = 100;

            //numero = 120;
            //numero = num1;
            #endregion

            #region Números Reais
            //float real1 = 100.75f; // 32 bits, de 1,5 × 10-45 a 3,4 × 1038, precisão de 7 dígitos => Sufixo f, Ex.: 10.5f
            //double real2 = 12500.45; // 64 bits, de 5,0 × 10-324 a 1,7 × 10308, precisão de 15 dígitos => Sufixo d (opcional), Ex.: 10.5d
            //decimal real3 = 752538.457m; // 128 bits, intervalo de pelos menos –7,9 × 10-28 a 7,9 × 1028, com precisão de pelo menos 28 dígitos => Sufixo m, Ex.: 10.5m

            //double valor;
            //valor = real1;
            #endregion

            #region Caractere
            //char letra = '\u0041';
            //char escape = '\n';
            //char literal = 'C';
            #endregion

            #region Boolean
            //bool verificar = false;
            //verificar = true;
            #endregion

            #region String (Cadeia de Caracteres)
            //string texto = @"Gabriel Artigas\n 1985 @@??$$";
            //string mensagem = null;
            //mensagem = texto;
            #endregion

            #region Tipo Implícito Var
            //var valor = 100;
            //valor = 20;
            //valor = "Gabriel";
            #endregion

            #region Tipo Object (Base para todos os tipos)
            //object obj = false;
            //obj = 200;
            //obj = "Gabriel";
            #endregion

            #region Constantes
            //const double pi = 3.1415;
            //const string nome = "Gabriel";
            #endregion

            #region Enumeração
            Notas notasAlunos = Notas.Media;
            #endregion

            #region Estruturas
            Pessoa p1 = new Pessoa();
            p1.altura = 1.65;
            p1.idade = 35;
            p1.nome = "Gabriel";

            Pessoa p2 = new Pessoa()
            {
                nome = "Arthur",
                idade = 9,
                altura = 1.35
            };

            p1.nome = "Logan";
          

            Console.WriteLine(p1.nome);
            Console.WriteLine(p1.idade);
            Console.WriteLine(p1.altura);
            Console.WriteLine();
            Console.WriteLine(p2.nome);
            Console.WriteLine(p2.idade);
            Console.WriteLine(p2.altura);

            Console.ReadKey();
          #endregion

---------------------------------------------------------------
#region conversao

          #region Conversão implicita
            //byte num1 = 255;
            //ushort num2;
            //num2 = num1;
            //float num3 = 1250.45f;
            //double num4 = num3;
            //int numero = 'C';
            #endregion
            #region Conversão Explicita
            //ushort num1 = 500;
            //byte num2 = (byte)num1;

            //float num3 = 2500f;
            //int num4 = (int)num3;

            //char letra = (char)97;

            #endregion
            #region Parse
            //string txtNumero = "1985";
            //int numero = int.Parse(txtNumero);
            //byte num1 = byte.Parse("120");
            //double num2 = double.Parse("125623,56");
            //float num3 = float.Parse("125,33");
            //
            #endregion
            #region treino 1
            //Console.WriteLine("digite um numero:");
            //string idade = Console.ReadLine();
            // int idadeCasamento = int.Parse(idade) + 10;
            // Console.WriteLine("Voce casará em "+idadeCasamento);
            #endregion

            #region Convert
            string texto = Convert.ToString(2500);
            double num1 = Convert.ToDouble(false);
            int num2 = Convert.ToInt32('c');
            Console.WriteLine(num2);
            Console.ReadLine();
            #endregion


#endregion
------------------------------------------------------------------
#region inverter nomes
     string nome1, nome2, nome3, nome4, auxiliar;
            Console.Write("digite o nome #1: ");
            nome1 = Console.ReadLine();

            Console.Write("digite o nome #2: ");
            nome2 = Console.ReadLine();

            Console.Write("difite o nome #3: ");
            nome3 = Console.ReadLine();

            Console.Write("digite o nome #4: ");
            nome4 = Console.ReadLine();

            //Mecanismo para inverter os nomes
            auxiliar = nome1;
            nome1 = nome4;
            nome4 = auxiliar;
            auxiliar = nome2;
            nome2 = nome3;
            nome3 = auxiliar;
            
            Console.WriteLine();
            Console.WriteLine("Nomes inseridos na sequencia invertida");
            Console.WriteLine(nome1);
            Console.WriteLine(nome2);
            Console.WriteLine(nome3);
            Console.WriteLine(nome4);

            Console.ReadKey();

#endregion
------------------------------------------------------------------
#region operadores
        #region Operadores Matematicos
            //int num1 = 10;
            //int num2 = 2;

            //Console.WriteLine(num1 +num2);
            //Console.WriteLine(num1 - num2);
            //Console.WriteLine(num1 * num2);
            //Console.WriteLine(num1 / num2);
            //Console.ReadKey();
            #endregion
            #region Precedencia de Operadores
            // prioridade de calculo. 1: (); 2: * e /; 3: + e -

            //int num1 = 100;
            //int num2 = 10;
            //int num3 = 5;
            //double result = num1 * (num1 + num2) / num3;
            //Console.WriteLine(result);    
            //Console.ReadKey();
            #endregion
            #region Incremento e decremento
            //int num1 = 10;
            //num1++;
            //++num1;
            //--num1;
            //num1--;
            #endregion
            #region Variavel de concatenação
            //string nome = "Filipe " + "Augusto";
            //string sobrenome = " Chaves "+1993;
            //Console.WriteLine(nome +sobrenome);
            #endregion
            #region Operadores de atribuição
            //float num1 = 10;
            //num1 += 20;         
            //num1 *= 2;
            //num1 /= 5;
            //num1 -= 2;
            //num1 %= 2; //resto
            //string nome = "filipe";
            //nome += " Augusto";
            #endregion
            #region Igualdade / comparação 
            //bool resu = 100+50 == 10*15; //igual ==
            //bool resu2 = 200 / 2 != 150;//diferente !=
            //string nome = "filipe";
            //bool resu3 = nome == "Filipe";
            //bool resu4 = nome != "augusto"; 
            //Console.WriteLine(resu + " " + resu2 + " " + resu3 + " "+resu4);
            #endregion
            #region Relacionais
            //bool res = 100 < 50 * 2;
            //bool res2 = 199 > 20;
            //bool res3 = 100 <= 200;
            //bool res4 = 20 >= 25;
            //Console.WriteLine(res);
            //Console.WriteLine(res2);
            //Console.WriteLine(res3);
            //Console.WriteLine(res4);
            #endregion
            #region Operadores Logicos
            //bool res1 = 100 > 50;
            //bool res2 = 120 == 120;
            //bool final = res1 && res2; //e
            //bool final2 = res1 || res2; //ou
            #endregion
            Console.WriteLine();
            Console.ReadKey();
	#endregion		
-------------------------------------------------------------------
#region variavel
           #region Numericas Integrais
            ////integral assinado
            //sbyte num1 = 10;  //de -128 a 127
            //short num2 = 20; // de -32.768 a 32.767
            //int num3 = 30; //de -2,147 x 10^10
            //long num4 = 40L; //de -9,223x 10^18 a  9,223x 10^18

            ////integral sem sinal
            //byte num5 = 10; //0 a 255
            //ushort num6 = 20; //de  0 a 65.535
            //uint num7 = 30; //de 0 a 4.29 x 10^9
            //ulong num8 = 40L; // de 0 a 1,8. z 10^18
            #endregion

            #region Numeros Reais
            //float real1 = 100.75f;//de 1,5 x 10^-45 a 3,4 x 10^38
            //double real2 = 500.754f; // de 5,0 x 10-324 a 1,7 x 10^308
            //decimal real3 = 752538.453m;
            #endregion

            #region Caractere
            //char letra = '\u0061';
            //char escape = '\n';
            //char literal = 'C';
            #endregion

            #region Boolean
            //bool verificar = false;
            //verificar = true;
            #endregion

            #region String
            string texto = @"Filipe Augusto \n Santos Chaves"; //@ ignora todos os caracateres de escape
            #endregion
            
            #region Var (tipo implicito)
            var valor = 140.6; //nao pode mais alterar o valor
            valor = 20;
            #endregion

            #region Objeto (base para todos os tipos)
            object obj = false;
            obj = 200;
            obj = "gabriel";
            #endregion

            #region Constantes
            const double pi = 3.1415;
            const string nome = "nome";
            #endregion
      
            #region Struct
           Pessoa p1 = new Pessoa();
            p1.altura = 1.75;
            p1.nome = "Filipe";
            p1.idade = 27;

            Pessoa p2 = new Pessoa(){
            nome = "Cassila",
            idade =30,
            altura = 1.65
            };
            Console.WriteLine( "\nNome: "+ p1.nome + "\nIdade: " + p1.idade + "\nAltura: "+p1.altura); 
            Console.WriteLine( "\nNome: "+ p2.nome + "\nIdade: " + p2.idade + "\nAltura: "+p2.altura);
            #endregion

#endregion
-------------------------------------------------------------------
#region Vetores
            //int numero = 0;
            //int[]  numeros = new int[5];
            //numeros[0] = 10;
            //numeros[1] = 15;
            //numeros[2] = 20;
            //numeros[3] = 30;
            //numeros[4] = 35;
            ////string[] nomes = new string[3];
            ////nomes[0] = "Filipe ";
            ////nomes[1] = "Augusto ";
            ////nomes[2] = "Santos ";

            //string[] nomes = {"Filipe", "Augusto", "Santos" };
            //Console.WriteLine(nomes[0]);
            //Console.WriteLine(numeros[0]);         
            //int[,] numeros = new int[2, 3];
            //numeros[0, 0] = 10;
            //numeros[0, 1] = 20;
            //numeros[0, 2] = 30;
            //numeros[1, 0] = 5;
            //numeros[1, 1] = 15;
            //numeros[1, 2] = 25;
            //for(int x = 0; x <= 1; x++)
            //{
            //    for(int y=0; y <= 2; y++)
            //    {
            //    Console.Write("["+x+","+y+ "] = "+numeros[x,y]+"; ");
            //    }
            //    Console.WriteLine("");
            //}

            string[,] nomes ={
                {"filipe","augusto","Chaves" },
                {"Cassila","nascimento","fonseca" }
            };
            #endregion
---------------------------------------------------------------------
#region multiplicar matrizes
        int[,] matriz1 = new int[2, 3];
            int[,] matriz2 = new int[3, 2];
            int[,] resultado = new int[2, 2];       
            Console.WriteLine("Preencher a matriz #1");
           for (int linha = 0; linha < 2; linha++)
            { 
                for(int coluna =0; coluna < 3; coluna++)
                {
                    Console.Write("1# Posição [" + linha + "][" + coluna + "]: ");
                    matriz1[linha, coluna] = int.Parse(Console.ReadLine());
                }
            }
            Console.WriteLine("\nPreencher a matriz #2");
            for (int linha = 0; linha < 3; linha++)
            {
                for (int coluna = 0; coluna < 2; coluna++)
                {
                    Console.Write("2# Posição [" + linha + "][" + coluna + "]: ");
                    matriz2[linha, coluna] = int.Parse(Console.ReadLine());
                }
            }
            Console.WriteLine("\nResultado de matriz #1 x matriz #2");
            resultado[0, 0] = (matriz1[0, 0] * matriz2[0, 0]) + (matriz1[0, 1] * matriz2[1, 0]) + (matriz1[0, 2] * matriz2[2, 0]);
            resultado[1, 0] = (matriz1[1, 0] * matriz2[1, 0]) + (matriz1[1, 1] * matriz2[1, 0]) + (matriz1[1, 2] * matriz2[2, 0]);
            resultado[0, 1] = (matriz1[0, 0] * matriz2[0, 0]) + (matriz1[0, 1] * matriz2[1, 1]) + (matriz1[0, 2] * matriz2[2, 1]);
            resultado[1, 1] = (matriz1[1, 0] * matriz2[0, 1]) + (matriz1[1, 1] * matriz2[1, 1]) + (matriz1[1, 2] * matriz2[2, 1]);
            Console.WriteLine("[" + resultado[0, 0] + "][" + resultado[0, 1] + "]");
            Console.WriteLine("[" + resultado[1, 0] + "][" + resultado[1, 1] + "]");
            Console.ReadLine();
#endregion	
-------------------------------------------------------------------		
#region condicao
   #region Condição simples e encadeada
            int valor = 10;
            if (valor ==5)
            {
                Console.WriteLine("Condição alternativa 0");
            }
            else if(valor == 10 && valor >=10)
            {
                Console.WriteLine("Condição alternativa 1");
            }
            else
            {
                Console.WriteLine("Condição falsa");
            }
            #endregion
            #region Condições alinhadas
            //int numero = 10;
            //if(numero> 5)
            //{
            //    Console.Write("O numero é maior que 5");
            //    if(numero %2 == 0)
            //    {
            //        Console.WriteLine("e também é par");
            //    }
            //    else
            //    {
            //        Console.WriteLine("mas não é par");
            //    }
            //}
            #endregion
            #region Operador ternario
            int numero = 10;
            string mensagem = numero > 5 ? "Maior que 5" : "Menos que 5";


            //condição ? true : false
            // mensagem = numero > 5 ? "Maior que 5" : "Menos que 5";

         //   Console.WriteLine(mensagem);
            Console.WriteLine(numero > 5 ? "Maior que 5" : "Menos que 5");
            Console.ReadKey();
            #endregion

#endregion		
-------------------------------------------------------------------
#region switch
            #region Condição Switch
            //    int escolha = 1;
            //    switch (escolha)
            //    {
            //        case 1:
            //            Console.WriteLine("Opção 1");
            //            break;
            //        case 2:
            //            Console.WriteLine("Opção 1");
            //            break;
            //        case 3:
            //            Console.WriteLine("Opção 1");
            //            break;
            //        default:

            //            break;
            //    }
            

            Inicio:
            Console.Write("Escolha uma opção: ");
            int op = int.Parse(Console.ReadLine());
            int valor = 0;

            switch (op)
            {
                default:
                    goto Inicio;
                    
                case 1:
                    valor += 100;
                    break;
                case 2:
                    valor += 50;
                    goto case 1;
            }
            Console.WriteLine("Valor final " + valor);
            Console.ReadKey();
			#endregion
#endregion
-----------------------------------------------------------
#region ciclos
   #region While
            //int valor = 0;
            //while(valor < 10)
            //{
            //    Console.WriteLine("O valor é " + valor);
            //    valor++;
            //}
            #endregion
            #region Do While
            //int valor = 0;
            //do
            //{
            //    Console.WriteLine("O valor é " + valor);
            //    valor++;
            //} while (valor < 10);
            #endregion
            #region For
            //for (int i =0, j =10; i < 10; i++, j--)
            //{
            //    Console.WriteLine("I = "+i+ "| J = " + j);
            //}
            //Console.ReadKey();
            #endregion
            #region Foreach
            string[] frutas = { "uva", "maça", "laranja", "limao" };
            foreach(string fruta in frutas)
            {
                Console.WriteLine(fruta);
            }
            #endregion
#endregion
---------------------------------------------------------------
#region fibonacci
      // 0 1 1 2 3
            //F(n + 2) = F(n + 1) + F(n) 
            int a = 0, b = 1, c = 0;

            Console.Write("Quantos valores: ");
            int valores = int.Parse(Console.ReadLine());

            Console.WriteLine("Sequencia de Fibonaccci com " + valores + " valores");

            for(int i =0; i < valores; i++)
            {
                if (i <valores -1)
                {
                    Console.Write(a + ", ");
                }
                else
                {
                    Console.Write(a );
                }
              
                c = a + b;
                a = b;
                b = c;
            }
            Console.ReadKey();
#endregion
-------------------------------------------------------------
#region fatorial
    static void Main(string[] args)
        {
            Console.WriteLine(Fatorial(5));
            Console.ReadKey();
        }

        static int Fatorial(int num)
        {

            if(num <= 0)
            {
                return 1;
            }
            else
            {
            return num * Fatorial(num - 1);
            }

        }
#endregion
---------------------------------------------------------------------
TASK
            #region Task Part 1
            //Task t1 = new Task(Tarefa);
            //t1.Start();

            //Task t2 = Task.Run(Tarefa);

            //Task.Run(Tarefa);
            //Task.Factory.StartNew(Tarefa);

            //Task.Run(() => {
            //    for (int i = 0; i < 10; i++)
            //    {
            //        Console.WriteLine("tarefa anonima");
            //    }
            //});
            //for (int i = 0; i < 10; i++)
            //{
            //    Console.WriteLine("tarefa anonima");
            //}
            #endregion
            #region Task Part 2
            //Task[] tasks =
            //{
            //    Task.Factory.StartNew(()=>{                
            //        Console.WriteLine("Tarefa 1");
            //    }),
            //        Task.Factory.StartNew(()=>{
            //             Console.WriteLine("Tarefa 2");
            //        }),
            //            Task.Factory.StartNew(()=>{
            //                 Console.WriteLine("Tarefa 3");
            //            }),
            //                Task.Factory.StartNew(()=>{
            //                     Console.WriteLine("Tarefa 4");
            //                })
            //};
            //  Task.WaitAll(tasks);// executa a task primeiro e o resto espera
            //Task t1 = Task.Run(() => { Console.WriteLine("Comando #1"); });
            //Task t2 = Task.Run(() => { Console.WriteLine("Comando #2"); });
            //Task t3 = Task.Run(() => { Console.WriteLine("Comando #3"); });
            //Task.WaitAll(t1,t2,t3);//na ordem
            //Console.WriteLine("Principal");
            //Console.ReadKey();
            #endregion
            //Task<int> tarefa1 = Task.Factory.StartNew(() => Dobro(5));
            //Console.WriteLine(tarefa1.Result);
            //Console.ReadKey();  

            Task<int> tarefa1 = Task.Factory.StartNew(() =>
            {
               // return new Random().Next(10);//0 a 9
                return 5;
            });

            Task<int> tarefa2 = tarefa1.ContinueWith((num)=> {
                return num.Result * 2;
            });

            Task<string> tarefa3 = tarefa2.ContinueWith((num) =>
            {
                return "Valor final " + num.Result;
            });

            Console.WriteLine(tarefa3.Result);
            Console.ReadKey();
        }

        static int Dobro(int num)
        {
            return num * 2;
        }
        static private void Tarefa()
        {
            for (int i = 0; i < 10; i++)
            {
                Console.WriteLine("Taregfa do task");
            }
        }
    }
----------------------------------------------------------------
Thread

 public partial class Form1 : Form
    {
        private  delegate void AtualizarControle(Control controle, string propriedade, object valor);
        Thread t;
        public Form1()
        {
            InitializeComponent();
            t = new Thread(new ThreadStart(Tarefa));
            t.IsBackground = true;
        }

        private void btnContador_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Principal");
        }

        private void btnPrincipal_Click(object sender, EventArgs e) {
            if (!t.IsAlive)
            {
                t.Start();
            }
        }

        private void Tarefa()
        {
            while (true)
            {
              //  DefinirValoPropriedade(lblResultado, "Text", DateTime.Now.Second.ToString());
                DefinirValoPropriedade(lblResultado, "BackColor", Color.Red);
                DefinirValoPropriedade(lblResultado, "BackColor", Color.Orange);
                DefinirValoPropriedade(lblResultado, "BackColor", Color.Green);
                lblResultado.Invoke(new Action(() => lblResultado.Text = DateTime.Now.Second.ToString()));
            }
        }
        private void DefinirValoPropriedade(Control controle, string propriedade, object valor)
        {
            if (controle.InvokeRequired)
            {
                AtualizarControle d = new AtualizarControle(DefinirValoPropriedade);
                controle.Invoke(d, new object[] { controle, propriedade, valor });
            }
            else
            {
                Type t = controle.GetType();
                PropertyInfo[] props = t.GetProperties();

                foreach (var p in props)
                {
                    if (p.Name.ToUpper() == propriedade.ToUpper())
                    {
                        p.SetValue(controle, valor, null);
                    }
                }
            }
        }
    }
-----------------------
       static void Main(string[] args)
        {

            Thread t = new Thread(new ThreadStart(Tarefa));
           //t.IsBackground = true;
            t.Start();
            t.Join();

            for (int i = 0; i < 10; i++)
            {
                Console.WriteLine("Principal");
                Thread.Sleep(500);
            }

            Console.ReadKey();
        }
        static void Tarefa()
        {
            for (int i = 0; i < 10; i++)
            {
                Console.WriteLine("Tarefa executada");
                Thread.Sleep(1000);
            }
        }
    }